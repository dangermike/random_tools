#!/usr/bin/env python3

# A little tool to clean up all the old Docker images
# Most of the complexity comes from having to understand versioning in the tags
# Note that only the latest tagged version for each repo is kept. This utility
# is not aware of multiple tags for the same version, so be careful!

import subprocess
try:
    import ujson as json
except ImportError:
    import json


def split_element(e):
    if e.isdigit():
        return (int(e), '')
    if type(e) is int:
        return (e, '')
    if not isinstance(e, str):
        raise ValueError('Provided value neither integer nor string')

    if '-' in e:
        s = e.split('-', 1)
        if s[0].isdigit():
            return (int(s[0]), s[1])

    return (1 << 63, e)


def int_like_compare(a, b):
    # returns 1 if a > b, -1 if b > a, 0 if a == b
    # a and b can be integers, strings, or integer-string (e.g. 123-foo)
    # integers and integer-strings are always less than strings
    # integers are first compared to the integer part of an integer-string, then trailing string(s) are compared
    a1, a2 = split_element(a)
    b1, b2 = split_element(b)

    if a1 > b1:
        return 1
    if b1 > a1:
        return -1
    if a2 > b2:
        return 1
    if b2 > a2:
        return -1
    return 0


def tag_compare(a, b):
    # returns 1 if a > b, -1 if b > a, 0 if a == b

    if a == b:
        return 0
    if a is None:
        return -1
    if b is None:
        return 1

    a_parts = a.split('.')
    b_parts = b.split('.')

    while 0 < len(a_parts) and 0 < len(b_parts):
        c = int_like_compare(a_parts[0], b_parts[0])
        if c != 0:
            return c
        a_parts = a_parts[1:]
        b_parts = b_parts[1:]

    if len(a_parts) > 0:
        return 1
    if len(b_parts) > 0:
        return -1
    return 0


def main():
    images = [
        json.loads(x)
        for x
        in subprocess.check_output(['docker', 'images', '--format', '{{json .}}']).split(b'\n')
        if x is not None and len(x) > 0
    ]

    kills = []
    best = {}

    for image in images:
        repo = image['Repository']
        tag = image['Tag']

        if '<none>' in (repo, tag):
            kills.append(image['ID'])
            continue

        best_tag = best.get(repo)
        if best_tag is None:
            best[repo] = tag
        elif tag_compare(best_tag, tag) < 0:
            # we have a new best!
            kills.append("%s:%s" % (repo, best_tag))
            best[repo] = tag
        else:
            kills.append("%s:%s" % (repo, tag))

    successes = 0
    failures = 0
    for k in kills:
        print(k)
        try:
            subprocess.check_call(['docker', 'rmi', k])
            successes += 1
        except:
            failures += 1

    if successes > 0 or failures == 0:
        print("Deleted %d images" % successes)
    if failures > 0:
        print("Failed to delete %d images" % failures)

if __name__ == '__main__':
    main()
